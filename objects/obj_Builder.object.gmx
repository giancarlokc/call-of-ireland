<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p1_breath</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Physics_Character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* The current value for jump */
jump = 60;
/* The default value for jump */
jump_const = 1500;
/* Acceleration */
force = 2300;
/* Maximum speed */
max_speed = 80;

/* Stopped counter */
prev_x = 0;
stop_count = 0;
/* Step sound counter */
step_sd_counter = 5;
/* Jumped sound */
jumped_sd = 0;
/* Rotation of the builder's table */
table_rotation = 0;
/* Number of tables built */
n_tables = 0;
can_build = true;
/* Says if the character is in the air */
jumped = 0;
/* Current value for the brake */
brake = 0;
/* Default value for the brake */
brake_const = 0;
/* Vector contains the data for the current jump */
jump_vec[100] = 0;
jump_counter = 0;
count = 0;
/* If true than the resulting y forces in the character are zero */
neut_force = true;

/* Following the leader */
leader_jumped = false;  // says if the leader jumped
leader_x = 0;   // leader coord x
leader_y = 0;   // leader coord y
too_far = 16;   // says how far the object can be
too_close = 8;  // says how close the object can be
inter_jmp = 20; // the precision of the jump spot **IF TOO CLOSE THE OBJECT MAY NOT JUMP DUE TO SPEED **
/* Follows the jump of the leader */
leader_jump_vec[100] = 0;
leader_n_vec = 0;

/* Keyboward Controls */
right=ord('D');
left=ord('A');
up=ord('W');

android_jump = false;
change = false;
alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Android_Jump_Button.x = x;

/* Prevents the object from spinning */
phy_rotation = 0;
phy_fixed_rotation = true;

/* The maximum speed is set */
if phy_linear_velocity_x &gt; max_speed {
    phy_linear_velocity_x = max_speed;
}
if phy_linear_velocity_x &lt; -max_speed {
    phy_linear_velocity_x = -max_speed;
}

/* If the character is still, shows breath sprite */
if phy_linear_velocity_x &lt;= max_speed/5 and physics_test_overlap(x,y+5, 0, obj_Physics) {
    obj_Builder.sprite_index = spr_p1_breath;
    obj_Builder.image_speed = 1;
}

/* If the character is moving on the ground, shows walk sprite */
if phy_linear_velocity_x &gt; max_speed/5 and physics_test_overlap(x,y+5, 0, obj_Physics) {
    obj_Builder.sprite_index = spr_p1_walk;
    obj_Builder.image_speed = 10;
}

/* If the character is jumping, shows jump sprite */
if phy_linear_velocity_y &lt; 0 and jumped == 1{
    obj_Builder.sprite_index = spr_p1_jump;
    obj_Builder.image_speed = 0;
    obj_Builder.image_index = 1;
}

/* the character is falling, shows fall sprite */
if phy_linear_velocity_y &gt; 0 and jumped == 1{
    obj_Builder.sprite_index = spr_p1_jump;
    obj_Builder.image_index = 2;
    obj_Builder.image_speed = 0;
    neut_force = false;
}

/* If the character is the leader, it jumps and sends data of jump to the other characters */
if jumped == 1 and global.leader == obj_Builder{
    physics_apply_force(x,y,0,-(jump-brake));
    if(global.leader == obj_Builder and jump_counter &lt; 100){
        jump_vec[jump_counter] = jump-brake;
        if(global.n_Builders &gt; 0){
            obj_Builder.leader_n_vec = jump_counter;
            obj_Builder.leader_jump_vec[jump_counter] = jump_vec[jump_counter];
            obj_Builder.leader_jumped = true;
        } if(global.n_Jumpers &gt; 0){   
            obj_Jumper.leader_n_vec = jump_counter;
            obj_Jumper.leader_jump_vec[jump_counter] = jump_vec[jump_counter]*1.3;
            obj_Jumper.leader_jumped = true;
        } if(global.n_Timys &gt; 0){
            obj_Timy.leader_n_vec = jump_counter;
            obj_Timy.leader_jump_vec[jump_counter] = jump_vec[jump_counter];
            obj_Timy.leader_jumped = true;
        }
        jump_counter++;
    }
}

/* Test if after jumping already felt on the ground */
if physics_test_overlap(x-2,y+2,0,obj_Physics){
    jumped = 0;
}

/*if physics_test_overlap(x-2,y+2,0,obj_Physics) and phy_linear_velocity_y &gt; 0{
    android_jump = false;
}*/

/* If this object is the leader */
if global.leader == obj_Builder {
    /* Goes left */
    if keyboard_check(left){
            physics_apply_force(x,y,-force/1.5,0);
    }
    /* Goes right */
    if room == 4 {
        physics_apply_force(x,y,force,0);
    } else {
//        if keyboard_check(right){
                physics_apply_force(x,y,force,0);
//        }
    }
    /* Jumps */
    if keyboard_check(up) or android_jump {
        if physics_test_overlap(x-2,y+2,0,obj_Physics){
            /* Plays the jump sound */
            if jumped_sd == 0{
                rand = floor(random(3));
                if rand == 0
                    audio_play_sound(sd_Jump01,1,false);
                else if rand == 1
                    audio_play_sound(sd_Jump02,1,false);
                else
                    audio_play_sound(sd_Jump03,1,false);
                jumped_sd = 1;
            }
            if neut_force == false {
                phy_linear_velocity_y = 0;
                neut_force = true;
            }
            if(global.n_Builders &gt; 0){
                obj_Builder.leader_x = x;
                obj_Builder.leader_y = y;
                obj_Builder.leader_jumped = true;
            }
            if(global.n_Jumpers &gt; 0){
                obj_Jumper.leader_x = x;
                obj_Jumper.leader_y = y;
                
            }
            if(global.n_Timys &gt; 0){
                obj_Timy.leader_x = x;
                obj_Timy.leader_y = y;
                obj_Timy.leader_jumped = true;
            }
            jumped = 1;
            jump = jump_const;
            brake = brake_const;
            jump_counter = 0;
        }
        if jump &gt; 0 {
            jump = jump - brake;
            brake+= 30;
        }
    } else {
        jumped_sd = 0;
        jump = 0;
        jump_counter = 0;
    }
/* If the character is not the leader */
} else {
    /* If is too far from the leader, gets closer */
    if point_distance(x,y,global.leader.x,global.leader.y) &gt; too_far {
        if x &lt; global.leader.x {
            physics_apply_force(x,y,force*1.5,0);
        } else {
            physics_apply_force(x,y,-force*1.5,0);
        }
    } else if point_distance(x,y,global.leader.x,global.leader.y) &lt; too_close {
        phy_linear_velocity_x = 0;
    }
    /* If the leader jumped, follows the jump */
    /* The jump is not a perfect copy of the leader's jump, enabling the character to fall or miss jump */
    if leader_jumped and (x &lt;= leader_x+inter_jmp and x &gt;= leader_x-inter_jmp) {
        if count &gt; leader_n_vec {
            leader_jumped = false;
            count = 0;
            neut_force = false;
        } else {
            if neut_force == false {
                phy_linear_velocity_y = 0;
                neut_force = true;
            }
            physics_apply_force(x,y,0,-(leader_jump_vec[count]+40));
            count++;
            if physics_test_overlap(x-2,y+2,0,obj_Physics){
                leader_jumped = false;
                count = 0;
            }
        }
    }
}

if x &lt;= prev_x+10 and x &gt;= prev_x-10 and global.leader == obj_Builder {
    if global.n_Timys &gt; 0 {
        if obj_Timy.paused == false
            stop_count++;
        else{
            prev_x = x;
            stop_count = 0;
        }
    } else {
        stop_count++;
    }
} else {
    prev_x = x;
    stop_count = 0;
}

/* If the character is not in the screen, he died. Change the leader */
if y &gt; 780 or (global.leader != obj_Builder and obj_Builder.x &lt; global.leader.x - 500) or stop_count == 25{
    stop_count = 0;
    if global.newbie == true {
        obj_Tutorial_Control.too_far = true;
    } else {
        audio_play_sound(sd_Death01,1,false);
        global.party_size--;
        global.n_Builders--;
        if(global.leader == obj_Builder){
            if(global.n_Jumpers &gt; 0)
                global.leader = obj_Jumper;
            else if(global.n_Timys &gt; 0)
                global.leader = obj_Timy;
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.leader == obj_Builder and change == true and mouse_x &gt;= view_xview[0]+265 and mouse_x &lt;= view_xview[0]+365 {// and mouse_y &gt;= y-50 and mouse_y &lt;= y+50 {
    // change leader
    if global.n_Jumpers &gt; 0 {
        global.leader = obj_Jumper;
        obj_Builder.depth = -9997;
        obj_Builder.too_far = 70;
        obj_Builder.too_close = 50;
        obj_Jumper.depth = -9999;
        obj_Timy.depth = -9998;
        obj_Timy.too_far = 35;
        obj_Timy.too_close = 25;
    } else if global.n_Timys &gt; 0 {
        global.leader = obj_Timy;
        obj_Builder.depth = -9997;
        obj_Builder.too_far = 70;
        obj_Builder.too_close = 50;
        obj_Jumper.depth = -9998;
        obj_Jumper.too_far = 35;
        obj_Jumper.too_close = 25;
        obj_Timy.depth = -9999;
    }
    change = false;
}

android_jump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>sd_Build01</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.leader == obj_Builder and mouse_x &gt;= view_xview[0]+265 and mouse_x &lt;= view_xview[0]+365 {// and mouse_y &gt;= y-50 and mouse_y &lt;= y+50 {
    change = true;
} else if global.leader == obj_Builder and mouse_x &gt;= view_xview[0] and mouse_x &lt; view_xview[0]+265 {
    android_jump = true;
} else
/* Creates a table for aiding the characters in the level */
if(global.leader == obj_Builder) and android_jump == false and can_build == true {
    n_tables++;
    instance_create(mouse_x, mouse_y, obj_Wood);
}

if room == 5 and global.leader == obj_Builder{
    if obj_Tutorial_Control.build_pause == true {
        obj_Tutorial_Control.build_pause_finished = true;
        obj_Tutorial_Control.build_pause = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// DEBUG
//if( jump_counter &gt; 0 ) {
//    for(i=0;i&lt;jump_counter;i++)
//        draw_text(20+(i*40), 300, "[" + string(jump_vec[i]) + "] ");
//}

//if leader_jumped {
//    draw_text(40, 300, "[Builder: Leader jumped!] ");
//} else {
//    draw_text(40, 300, "[Builder: Leader has not jumped!] ");
//}

//if global.leader == obj_Builder and mouse_x &gt;= view_xview[0]+490 and mouse_x &lt;= view_xview[0]+590
//draw_text(100,100,"x: "+string(view_xview[0])+" y:"+string(view_yview[0]));
//draw_sprite(spr_Change_Limits,0,265,650);
//if change == true {
//    draw_sprite(spr_Change_Effect,0,265,0);
//}

if android_jump == true and global.leader == obj_Builder {
    draw_sprite_ext(spr_Jump_Effect,0,0,0,1,1,0,c_white,alpha);
    if alpha &lt; 1 alpha+=0.05;
} else {
    if alpha &gt; 0 {
        alpha-=0.05
        draw_sprite_ext(spr_Jump_Effect,0,0,0,1,1,0,c_white,alpha);
    } else {
        alpha = 0;
    }
}

//draw_text(100,200,"Speed_x:"+string(phy_linear_velocity_x));
//draw_text(100,300,"Counter:"+string(stop_count));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>52,56</point>
    <point>32,25</point>
  </PhysicsShapePoints>
</object>
