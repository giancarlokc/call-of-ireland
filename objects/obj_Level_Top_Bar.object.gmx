<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myCoin = instance_create(0,0,obj_Coin);
game_stoped = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != 2) and global.party_size &gt; 0{
    /* Makes the bar always in the center */
    if global.leader.x &gt; 290 and global.leader.x &lt; room_width - 790 {
        x = global.leader.x + 250;
        y = 16;
    } else {
        if global.leader.x &lt;= 290 {
            x = 540;
            y = 16;
        } else {
            x = room_width - 540;
            y = 16;
        }
    }
}

/* Set the position for the objects of the bar */
    obj_Fullscreen_Button.x = x + 480;
    obj_Fullscreen_Button.y = y;
    obj_MusicUP_Button.x = x + 400;
    obj_MusicUP_Button.y = y;
    obj_MusicDOWN_Button.x = x + 360;
    obj_MusicDOWN_Button.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>526</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_font</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>12</kind>
            <font>standard</font>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Draw the number of tables left */
if game_stoped == false and global.n_Builders &gt; 0 {
    position_x = 300;
    position_y = 20;
    draw_sprite_stretched(spr_Specials_Box01,0,position_x,position_y,100,40);
    draw_sprite(spr_Table_Count,0,position_x+132,position_y+21);
    if global.current_level == 1 {
        draw_text(position_x+10,position_y+15,string(obj_Level01_Control.max_n_tables - obj_Builder.n_tables));
        if obj_Level01_Control.max_n_tables - obj_Builder.n_tables &lt;= 0{
            obj_Builder.can_build = false;
        }
    } else if global.current_level == 2 {
        draw_text(position_x+10,position_y+15,string(obj_Tutorial_Control.max_n_tables - obj_Builder.n_tables));
        if obj_Tutorial_Control.max_n_tables - obj_Builder.n_tables &lt;= 0{
            obj_Builder.can_build = false;
        }
    } else if global.current_level == 3 {
        draw_text(position_x+10,position_y+15,string(obj_Level02_Control.max_n_tables - obj_Builder.n_tables));
        if obj_Level02_Control.max_n_tables - obj_Builder.n_tables &lt;= 0{
            obj_Builder.can_build = false;
        }
    } else if global.current_level == 4 {
        draw_text(position_x+10,position_y+15,string(obj_Level03_Control.max_n_tables - obj_Builder.n_tables));
        if obj_Level03_Control.max_n_tables - obj_Builder.n_tables &lt;= 0{
            obj_Builder.can_build = false;
        }
    } else if global.current_level == 5 {
        draw_text(position_x+10,position_y+15,string(obj_Level04_Control.max_n_tables - obj_Builder.n_tables));
        if obj_Level04_Control.max_n_tables - obj_Builder.n_tables &lt;= 0{
            obj_Builder.can_build = false;
        }
    } else if global.current_level == 6 {
        draw_text(position_x+10,position_y+15,string(obj_Level_5_Control.max_n_tables - obj_Builder.n_tables));
        if obj_Level_5_Control.max_n_tables - obj_Builder.n_tables &lt;= 0{
            obj_Builder.can_build = false;
        }
    }
}

/* Draw the number of pauses left */
if game_stoped == false and global.n_Timys &gt; 0 {
    position_x = 500;
    position_y = 20;
    draw_sprite_stretched(spr_Specials_Box01,0,position_x,position_y,100,40);
    draw_sprite(spr_Time_Count,0,position_x+132,position_y+21);
    if global.current_level == 1 {
        draw_text(position_x+10,position_y+15,string(obj_Level01_Control.max_n_pauses - obj_Timy.n_pause));
        if obj_Level01_Control.max_n_pauses - obj_Timy.n_pause &lt;= 0{
            obj_Timy.can_pause = false;
        }
    } else if global.current_level == 2 {
        draw_text(position_x+10,position_y+15,string(obj_Tutorial_Control.max_n_pauses - obj_Timy.n_pause));
        if obj_Tutorial_Control.max_n_pauses - obj_Timy.n_pause &lt;= 0{
            obj_Timy.can_pause = false;
        }
    } else if global.current_level == 3 {
        draw_text(position_x+10,position_y+15,string(obj_Level02_Control.max_n_pauses - obj_Timy.n_pause));
        if obj_Level02_Control.max_n_pauses - obj_Timy.n_pause &lt;= 0{
            obj_Timy.can_pause = false;
        }
    } else if global.current_level == 4 {
        draw_text(position_x+10,position_y+15,string(obj_Level03_Control.max_n_pauses - obj_Timy.n_pause));
        if obj_Level03_Control.max_n_pauses - obj_Timy.n_pause &lt;= 0{
            obj_Timy.can_pause = false;
        }
    } else if global.current_level == 5 {
        draw_text(position_x+10,position_y+15,string(obj_Level04_Control.max_n_pauses - obj_Timy.n_pause));
        if obj_Level04_Control.max_n_pauses - obj_Timy.n_pause &lt;= 0{
            obj_Timy.can_pause = false;
        }
    } else if global.current_level == 6 {
        draw_text(position_x+10,position_y+15,string(obj_Level_5_Control.max_n_pauses - obj_Timy.n_pause));
        if obj_Level_5_Control.max_n_pauses - obj_Timy.n_pause &lt;= 0{
            obj_Timy.can_pause = false;
        }
    }
}

/* Drawing the score */
if game_stoped == false {
    position_x = 100;
    position_y = 20;
    draw_sprite_stretched(spr_Specials_Box01,0,position_x,position_y,100,40);
    draw_sprite(spr_Coin,0,position_x+70,position_y+21);
    draw_text(position_x+10,position_y+15,string(global.current_score));
}

/* Drawing the current level */
/*
draw_set_font(standard);
if global.current_level == 2 {
    draw_text(540 - 350,16 - 5,"Level: Tutorial");
} else if global.current_level &gt; 2 {
    draw_text(540 - 350,16 - 5,"Level: " + string(global.current_level-1));
} else {
     draw_text(540 - 350,16 - 5,"Level: " + string(global.current_level));
}*/

/* Drawing the leader */
/*
if global.party_size &gt; 0 and room &gt; 2{
    if global.leader == obj_Builder {
        draw_text(540 - 150, 16-5, "Leader: ")
        draw_sprite_stretched(spr_Builder_Right_Black, 0, 540 - 75, 16-15,35,35);
    } else if global.leader == obj_Jumper {
        draw_text(540 - 150, 16-5, "Leader: ")
        draw_sprite_stretched(spr_Jumper_Right_Black, 0, 540 - 75, 16-15,35,35);
    } else {
        draw_text(540 - 150, 16-5, "Leader: ")
        draw_sprite_stretched(spr_Timy_Right_Black, 0, 540 - 75, 16-15,35,35);
    }
}*/

/* Drawing the group */
/*
draw_text( 540 + 10, 16 - 5,"Team: ");
i = 0;
for(j=0;j&lt;global.n_Builders;j++){
    draw_sprite_stretched(spr_Builder_Right_Black, 0, 540 + 70 + (i*30), 16-15,35,35);
    i++;
}
for(j=0;j&lt;global.n_Jumpers;j++){
    draw_sprite_stretched(spr_Jumper_Right_Black, 0, 540 + 70 + (i*30), 16-15,35,35);
    i++;
}
for(j=0;j&lt;global.n_Timys;j++){
    draw_sprite_stretched(spr_Timy_Right_Black, 0, 540 + 70 + (i*30), 16-15,35,35);
    i++;
}*/
//draw_text(540 + 70,16 - 5,string(global.party_size));
/*
draw_text(x - 500,y - 5,string(global.current_score));
draw_text(x - 370,y - 5,string(global.current_diamond));
draw_text(x - 175,y - 5,string(global.current_level));
draw_text(x + 70,y - 5,string(global.party_size));
*/

audio_music_gain(global.music_volume, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
